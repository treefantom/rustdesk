class PasswordArea: Reactor.Component {
    function this() {
        passwordArea = this;
    }

    function render() {
        var me = this;
        self.timer(1ms, function() { me.toggleMenuState() });
        return 
        <div .your-desktop>
            <div>{translate('One-time Password')}</div>
            <div .password style="flow:horizontal">
                {this.renderPop()}
                <PasswordEyeArea />
                {svg_edit}
            </div>
            <!-- Добавляем кнопку "Дополнительные функции" -->
            <div style="margin-top: 10px;">
                <button #additional-functions .button>{translate('Дополнительные функции')}</button>
            </div>
        </div>;
    }

    function renderPop() {
        var method = handler.get_option('verification-method');
        var approve_mode= handler.get_option('approve-mode');
        var show_password = approve_mode != 'click';
        return <popup><menu.context #edit-password-context>
            <li #approve-mode-password><span>{svg_checkmark}</span>{translate('Accept sessions via password')}</li>
            <li #approve-mode-click><span>{svg_checkmark}</span>{translate('Accept sessions via click')}</li>
            <li #approve-mode-both><span>{svg_checkmark}</span>{translate('Accept sessions via both')}</li>
            { !show_password ? '' : <div .separator /> }
            { !show_password ? '' : <li #use-temporary-password><span>{svg_checkmark}</span>{translate('Use one-time password')}</li> }
            { !show_password ? '' : <li #use-permanent-password><span>{svg_checkmark}</span>{translate('Use permanent password')}</li> }
            { !show_password ? '' : <li #use-both-passwords><span>{svg_checkmark}</span>{translate('Use both passwords')}</li> }
            { !show_password ? '' : <div .separator /> }
            { !show_password ? '' : <li #set-password  disabled={ method == 'use-temporary-password' ? "true" : "false" }>{translate('Set permanent password')}</li> }
            { !show_password ? '' : <TemporaryPasswordLengthMenu /> }
            <div .separator />
            <li #tfa><span>{svg_checkmark}</span>{translate('enable-2fa-title')}</li>
        </menu></popup>;
    }

    function toggleMenuState() {
         var mode= handler.get_option('approve-mode');
        var mode_id;
        if (mode == 'password')
            mode_id = 'approve-mode-password';
        else if (mode == 'click')
            mode_id = 'approve-mode-click';
        else
            mode_id = 'approve-mode-both';
        var pwd_id = handler.get_option('verification-method');
        if (pwd_id != 'use-temporary-password' && pwd_id != 'use-permanent-password')
            pwd_id = 'use-both-passwords';
        var has_valid_2fa = handler.has_valid_2fa();
        for (var el in this.$$(menu#edit-password-context>li)) {
            if (el.id.indexOf("approve-mode-") == 0)
                el.attributes.toggleClass("selected", el.id == mode_id);
            if (el.id.indexOf("use-") == 0)
                el.attributes.toggleClass("selected", el.id == pwd_id);
            if (el.id == "tfa")
                el.attributes.toggleClass("selected", has_valid_2fa);
        }
    }

    event click $(svg#edit) (_, me) {
        var approve_mode= handler.get_option('approve-mode');
        var show_password = approve_mode != 'click';
        if(show_password && temporaryPasswordLengthMenu) temporaryPasswordLengthMenu.update({show: true });
        var menu = $(menu#edit-password-context);        
        me.popup(menu);
    }

    event click $(li#set-password) {
        var me = this;
        var password = handler.permanent_password();
        var value_field = password.length == 0 ? "" : "value=" + password;
        msgbox("custom-password", translate("Set Password"), "<div .form .set-password> \
            <div><span>" + translate('Password') + ":</span><input|password(password) .outline-focus " + value_field + " /></div> \
            <div><span>" + translate('Confirmation') + ":</span><input|password(confirmation) " + value_field + " /></div> \
        </div> \
        ", "", function(res=null) {
            if (!res) return;
            var p0 = (res.password || "").trim();
            var p1 = (res.confirmation || "").trim();
            if (p0.length < 6 && p0.length != 0) {
                return translate("Too short, at least 6 characters.");
            }
            if (p0 != p1) {
                return translate("The confirmation is not identical.");
            }
            handler.set_permanent_password(p0);
            me.update();
        });
    }

    event click $(menu#edit-password-context>li) (_, me) {
        if (me.id.indexOf('use-') == 0) {
            handler.set_option('verification-method', me.id);
            this.toggleMenuState();
            passwordArea.update();
        } else if (me.id.indexOf('approve-mode') == 0) {
            var approve_mode;
            if (me.id == 'approve-mode-password')
                approve_mode = 'password';
            else if (me.id == 'approve-mode-click')
                approve_mode = 'click';
            else
                approve_mode = '';
            handler.set_option('approve-mode', approve_mode);
            this.toggleMenuState();
            passwordArea.update();
        }
    }

    event click $(li#tfa) {
        var me = this;
        var has_valid_2fa = handler.has_valid_2fa();
        if (has_valid_2fa) {
            handler.set_option('2fa', '');
            me.update();
        } else {
            var new2fa = handler.generate2fa();
            var src = handler.generate_2fa_img_src(new2fa);
            msgbox("custom-2fa-setting", translate('enable-2fa-title'),
                <div .form>
                    <div>{translate('enable-2fa-desc')}</div>
                    <img src={src} />
                    <div .code><input name='code' type='text' .outline-focus /></div>
                </div>
                , "", function(res=null) {
                if (!res) return;
                if (!res.code) return;
                if (!handler.verify2fa(res.code)) {
                    return translate('wrong-2fa-code');
                }
                me.update();
            }, 400);
        }
    }

    // Обработчик для кнопки "Дополнительные функции"
    event click $(#additional-functions) {
        // Пример: Открыть диалоговое окно с дополнительными функциями
        msgbox("custom-info", "Дополнительные функции", "Здесь будут дополнительные функции!");
    }
}